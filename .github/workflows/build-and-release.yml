name: Build Flutter Windows App and Create Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'
          channel: 'stable'

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows app
        run: flutter build windows --release

      - name: Copy Visual C++ Redistributables
        run: |
          $buildPath = "build/windows/x64/runner/Release"
          
          # Find and copy Visual C++ Redistributable DLLs
          $vcRedistPaths = @(
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Redist\MSVC\*\x64\Microsoft.VC*.CRT\*.dll",
              "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\*\x64\Microsoft.VC*.CRT\*.dll",
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools\VC\Redist\MSVC\*\x64\Microsoft.VC*.CRT\*.dll",
              "C:\Windows\System32\msvcp140.dll",
              "C:\Windows\System32\vcruntime140.dll",
              "C:\Windows\System32\vcruntime140_1.dll"
          )
          
          foreach ($path in $vcRedistPaths) {
              $files = Get-ChildItem $path -ErrorAction SilentlyContinue
              foreach ($file in $files) {
                  if ($file.Name -match "(msvcp140|vcruntime140)") {
                      Copy-Item $file.FullName $buildPath -Force -ErrorAction SilentlyContinue
                      echo "Copied: $($file.Name)"
                  }
              }
          }

      - name: Get app info and create package
        id: package
        run: |
          # Get app name from pubspec.yaml
          $content = Get-Content pubspec.yaml -Raw
          $appName = ($content | Select-String "name:\s*(.+)" | ForEach-Object { $_.Matches[0].Groups[1].Value }).Trim()
          
          # Get version from pubspec.yaml
          $version = ($content | Select-String "version:\s*(.+)" | ForEach-Object { $_.Matches[0].Groups[1].Value }).Trim()
          
          # Set environment variables
          echo "APP_NAME=$appName" >> $env:GITHUB_ENV
          echo "APP_VERSION=$version" >> $env:GITHUB_ENV
          
          # Ensure all required DLLs are in the Release folder
          $buildPath = "build/windows/x64/runner/Release"
          $flutterRoot = $env:FLUTTER_ROOT
          
          if (Test-Path $buildPath) {
              # Copy missing Flutter DLLs
              $flutterDlls = @(
                  "$flutterRoot/bin/flutter_windows.dll",
                  "$flutterRoot/bin/flutter_windows.dll.lib"
              )
          
              foreach ($dll in $flutterDlls) {
                  if (Test-Path $dll) {
                      Copy-Item $dll $buildPath -Force
                      echo "Copied: $(Split-Path $dll -Leaf)"
                  }
              }
          
              # Also copy any additional DLLs from the runner folder
              $runnerPath = "build/windows/x64/runner"
              if (Test-Path "$runnerPath/*.dll") {
                  Copy-Item "$runnerPath/*.dll" $buildPath -Force
                  echo "Copied runner DLLs"
              }
          
              # List all files in release folder for debugging
              echo "Files in release folder:"
              Get-ChildItem $buildPath | Format-Table Name, Length -AutoSize
          }
          
          # Create ZIP package with all dependencies
          $zipName = "$appName-windows-x64-$version.zip"
          
          if (Test-Path $buildPath) {
              Compress-Archive -Path "$buildPath/*" -DestinationPath $zipName -Force
              echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV
              echo "Package created: $zipName"
          } else {
              Write-Error "Build path not found: $buildPath"
              exit 1
          }

      - name: Generate release tag
        id: tag
        run: |
          $timestamp = Get-Date -Format "yyyy.MM.dd.HHmm"
          $tag = "v${{ env.APP_VERSION }}-$timestamp"
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "Generated tag: $tag"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ env.APP_NAME }} v${{ env.APP_VERSION }}
          body: |
            ## üöÄ ${{ env.APP_NAME }} Windows Release
            
            **Version:** ${{ env.APP_VERSION }}
            **Build:** ${{ steps.tag.outputs.tag }}
            **Platform:** Windows x64
            
            ### üì¶ Installation
            1. Download the ZIP file from assets below
            2. Extract to your desired location
            3. Run the .exe file inside the extracted folder
            
            ### üîß Build Info
            - Built from commit: ${{ github.sha }}
            - Built on: ${{ github.run_number }}
            - Build date: ${{ github.event.head_commit.timestamp }}
            
            ### üìã Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
          files: |
            ${{ env.ZIP_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build output
        run: |
          echo "Build verification:"
          echo "App Name: ${{ env.APP_NAME }}"
          echo "Version: ${{ env.APP_VERSION }}"
          echo "ZIP file: ${{ env.ZIP_NAME }}"
          
          if (Test-Path "${{ env.ZIP_NAME }}") {
              echo "‚úÖ ZIP file exists"
              $zipSize = (Get-Item "${{ env.ZIP_NAME }}").Length
              echo "üì¶ ZIP size: $([math]::Round($zipSize/1MB, 2)) MB"
          } else {
              echo "‚ùå ZIP file not found"
          }
          
          $buildPath = "build/windows/x64/runner/Release"
          if (Test-Path $buildPath) {
              echo "‚úÖ Build directory exists"
              echo "üìÅ Build contents:"
              Get-ChildItem $buildPath | Format-Table Name, Length -AutoSize
          
              # Check for required DLLs
              $requiredDlls = @("flutter_windows.dll", "msvcp140.dll", "vcruntime140.dll")
              echo "üîç Checking for required DLLs:"
              foreach ($dll in $requiredDlls) {
                  if (Test-Path "$buildPath/$dll") {
                      echo "‚úÖ $dll found"
                  } else {
                      echo "‚ùå $dll missing"
                  }
              }
          } else {
              echo "‚ùå Build directory not found"
          }

      - name: Upload additional assets (optional)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: |
            build/windows/x64/runner/Release/${{ env.APP_NAME }}.exe
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true