name: Build Flutter Windows App and Create Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, x86, arm64]
        include:
          - architecture: x64
            flutter_arch: windows-x64
            vs_arch: x64
            folder_arch: x64
          - architecture: x86
            flutter_arch: windows-x86
            vs_arch: x86
            folder_arch: Win32
          - architecture: arm64
            flutter_arch: windows-arm64
            vs_arch: arm64
            folder_arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'
          channel: 'stable'

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows app for ${{ matrix.architecture }}
        run: |
          if ("${{ matrix.architecture }}" -eq "x86") {
            flutter build windows --release --target-platform windows-x86
          } elseif ("${{ matrix.architecture }}" -eq "arm64") {
            flutter build windows --release --target-platform windows-arm64
          } else {
            flutter build windows --release --target-platform windows-x64
          }

      - name: Copy required DLLs and prepare package
        run: |
          $buildPath = "build/windows/${{ matrix.folder_arch }}/runner/Release"
          
          # Ensure build directory exists
          if (!(Test-Path $buildPath)) {
              Write-Error "Build path not found: $buildPath"
              exit 1
          }
          
          echo "=== Building for ${{ matrix.architecture }} architecture ==="
          echo "Build path: $buildPath"
          
          echo "=== Copying Flutter DLLs ==="
          # Try multiple locations for flutter_windows.dll
          $flutterDllPaths = @(
              "$env:FLUTTER_ROOT\bin\cache\artifacts\engine\${{ matrix.flutter_arch }}\flutter_windows.dll",
              "$env:FLUTTER_ROOT\bin\cache\artifacts\engine\${{ matrix.flutter_arch }}-release\flutter_windows.dll",
              "$env:FLUTTER_ROOT\bin\flutter_windows.dll"
          )
          
          $flutterDllFound = $false
          foreach ($dllPath in $flutterDllPaths) {
              if (Test-Path $dllPath) {
                  Copy-Item $dllPath $buildPath -Force
                  echo "✅ Copied flutter_windows.dll from: $dllPath"
                  $flutterDllFound = $true
                  break
              }
          }
          
          if (!$flutterDllFound) {
              Write-Warning "⚠️ flutter_windows.dll not found in expected locations"
              # Force Flutter to download engine artifacts
              echo "Attempting to download Flutter engine artifacts..."
              flutter precache --windows
          
              # Try again after precache
              foreach ($dllPath in $flutterDllPaths) {
                  if (Test-Path $dllPath) {
                      Copy-Item $dllPath $buildPath -Force
                      echo "✅ Copied flutter_windows.dll from: $dllPath (after precache)"
                      $flutterDllFound = $true
                      break
                  }
              }
          
              if (!$flutterDllFound) {
                  # Last resort: search for the DLL in the Flutter installation
                  echo "Searching for flutter_windows.dll in Flutter installation..."
                  $foundDlls = Get-ChildItem "$env:FLUTTER_ROOT" -Name "flutter_windows.dll" -Recurse -ErrorAction SilentlyContinue
                  foreach ($dll in $foundDlls) {
                      $fullPath = Join-Path $env:FLUTTER_ROOT $dll
                      Copy-Item $fullPath $buildPath -Force
                      echo "✅ Copied flutter_windows.dll from: $fullPath"
                      $flutterDllFound = $true
                      break
                  }
              }
          }
          
          if (!$flutterDllFound) {
              Write-Error "❌ Could not find flutter_windows.dll - build will fail at runtime!"
              exit 1
          }
          
          echo "=== Copying Visual C++ Redistributables for ${{ matrix.architecture }} ==="
          # Architecture-specific VC++ redistributable paths
          $vcRedistPaths = @()
          
          if ("${{ matrix.architecture }}" -eq "x64") {
              $vcRedistPaths = @(
                  "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Redist\MSVC\*\x64\Microsoft.VC*.CRT\*.dll",
                  "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\*\x64\Microsoft.VC*.CRT\*.dll",
                  "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools\VC\Redist\MSVC\*\x64\Microsoft.VC*.CRT\*.dll",
                  "C:\Windows\System32\msvcp140.dll",
                  "C:\Windows\System32\vcruntime140.dll",
                  "C:\Windows\System32\vcruntime140_1.dll"
              )
          } elseif ("${{ matrix.architecture }}" -eq "x86") {
              $vcRedistPaths = @(
                  "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Redist\MSVC\*\x86\Microsoft.VC*.CRT\*.dll",
                  "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\*\x86\Microsoft.VC*.CRT\*.dll",
                  "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools\VC\Redist\MSVC\*\x86\Microsoft.VC*.CRT\*.dll",
                  "C:\Windows\SysWOW64\msvcp140.dll",
                  "C:\Windows\SysWOW64\vcruntime140.dll",
                  "C:\Windows\SysWOW64\vcruntime140_1.dll"
              )
          } else {
              # ARM64
              $vcRedistPaths = @(
                  "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Redist\MSVC\*\arm64\Microsoft.VC*.CRT\*.dll",
                  "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\*\arm64\Microsoft.VC*.CRT\*.dll",
                  "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools\VC\Redist\MSVC\*\arm64\Microsoft.VC*.CRT\*.dll"
              )
          }
          
          $vcDllsFound = 0
          foreach ($path in $vcRedistPaths) {
              $files = Get-ChildItem $path -ErrorAction SilentlyContinue
              foreach ($file in $files) {
                  if ($file.Name -match "(msvcp140|vcruntime140)") {
                      Copy-Item $file.FullName $buildPath -Force -ErrorAction SilentlyContinue
                      echo "✅ Copied: $($file.Name)"
                      $vcDllsFound++
                  }
              }
          }
          
          if ($vcDllsFound -eq 0) {
              Write-Warning "⚠️ No Visual C++ redistributables found for ${{ matrix.architecture }}"
          }
          
          echo "=== Final DLL verification ==="
          $requiredDlls = @("flutter_windows.dll")
          if ("${{ matrix.architecture }}" -ne "arm64") {
              $requiredDlls += @("msvcp140.dll", "vcruntime140.dll")
          }
          
          foreach ($dll in $requiredDlls) {
              if (Test-Path "$buildPath\$dll") {
                  echo "✅ $dll - OK"
              } else {
                  echo "❌ $dll - MISSING"
              }
          }
          
          echo "=== Contents of release folder ==="
          Get-ChildItem $buildPath | Format-Table Name, Length -AutoSize

      - name: Get app info and create package
        id: package
        run: |
          # Get app name from pubspec.yaml
          $content = Get-Content pubspec.yaml -Raw
          $appName = ($content | Select-String "name:\s*(.+)" | ForEach-Object { $_.Matches[0].Groups[1].Value }).Trim()
          
          # Get version from pubspec.yaml
          $version = ($content | Select-String "version:\s*(.+)" | ForEach-Object { $_.Matches[0].Groups[1].Value }).Trim()
          
          # Set environment variables
          echo "APP_NAME=$appName" >> $env:GITHUB_ENV
          echo "APP_VERSION=$version" >> $env:GITHUB_ENV
          
          # Create ZIP package with all dependencies
          $buildPath = "build/windows/${{ matrix.folder_arch }}/runner/Release"
          $zipName = "$appName-windows-${{ matrix.architecture }}-$version.zip"
          
          if (Test-Path $buildPath) {
              Compress-Archive -Path "$buildPath\*" -DestinationPath $zipName -Force
              echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV
              echo "✅ Package created: $zipName"
          } else {
              Write-Error "Build path not found: $buildPath"
              exit 1
          }

      - name: Generate release tag
        id: tag
        run: |
          $timestamp = Get-Date -Format "yyyy.MM.dd.HHmm"
          $tag = "v${{ env.APP_VERSION }}-$timestamp"
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "Generated tag: $tag"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ env.APP_NAME }} v${{ env.APP_VERSION }} (${{ matrix.architecture }})
          body: |
            ## 🚀 ${{ env.APP_NAME }} Windows Release
            
            **Version:** ${{ env.APP_VERSION }}
            **Build:** ${{ steps.tag.outputs.tag }}
            **Platform:** Windows ${{ matrix.architecture }}
            **Architecture:** ${{ matrix.architecture }}
            
            ### 📦 Installation
            1. Download the appropriate ZIP file for your system architecture:
               - **x64**: For 64-bit Intel/AMD processors (most common)
               - **x86**: For 32-bit Intel/AMD processors (older systems)
               - **arm64**: For ARM64 processors (newer Windows on ARM devices)
            2. Extract to your desired location
            3. Run the .exe file inside the extracted folder
            
            ### 🖥️ System Requirements
            - **x64**: Windows 10 x64 or later
            - **x86**: Windows 10 x86 or later  
            - **arm64**: Windows 11 ARM64 or Windows 10 ARM64 (version 1903+)
            - Visual C++ Redistributable (included in package)
            
            ### ❓ Which version should I download?
            - Most users should download the **x64** version
            - Only download **x86** if you have a 32-bit Windows system
            - Only download **arm64** if you have a Windows on ARM device (like Surface Pro X)
            
            ### 🔧 Build Info
            - Built from commit: ${{ github.sha }}
            - Built on: ${{ github.run_number }}
            - Build date: ${{ github.event.head_commit.timestamp }}
            
            ### 📋 Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
          files: |
            ${{ env.ZIP_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build output
        run: |
          echo "=== Build Verification for ${{ matrix.architecture }} ==="
          echo "App Name: ${{ env.APP_NAME }}"
          echo "Version: ${{ env.APP_VERSION }}"
          echo "Architecture: ${{ matrix.architecture }}"
          echo "ZIP file: ${{ env.ZIP_NAME }}"
          
          if (Test-Path "${{ env.ZIP_NAME }}") {
              echo "✅ ZIP file exists"
              $zipSize = (Get-Item "${{ env.ZIP_NAME }}").Length
              echo "📦 ZIP size: $([math]::Round($zipSize/1MB, 2)) MB"
          } else {
              echo "❌ ZIP file not found"
          }
          
          $buildPath = "build/windows/${{ matrix.folder_arch }}/runner/Release"
          if (Test-Path $buildPath) {
              echo "✅ Build directory exists"
              echo "📁 Build contents:"
              Get-ChildItem $buildPath | Format-Table Name, Length -AutoSize
          
              # Check for required DLLs
              $requiredDlls = @("flutter_windows.dll")
              if ("${{ matrix.architecture }}" -ne "arm64") {
                  $requiredDlls += @("msvcp140.dll", "vcruntime140.dll")
              }
          
              echo "🔍 Final DLL check for ${{ matrix.architecture }}:"
              foreach ($dll in $requiredDlls) {
                  if (Test-Path "$buildPath\$dll") {
                      echo "✅ $dll found"
                  } else {
                      echo "❌ $dll missing - THIS WILL CAUSE RUNTIME ERRORS!"
                  }
              }
          } else {
              echo "❌ Build directory not found"
          }

      - name: Upload architecture-specific executable
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: |
            build/windows/${{ matrix.folder_arch }}/runner/Release/${{ env.APP_NAME }}.exe
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  create-combined-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Create combined release summary
        run: |
          echo "All architecture builds completed successfully!"
          echo "Available downloads:"
          echo "- x64: For 64-bit Intel/AMD systems (most common)"
          echo "- x86: For 32-bit Intel/AMD systems"  
          echo "- arm64: For ARM64 Windows devices"