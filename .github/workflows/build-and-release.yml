name: Build Flutter Windows App and Create Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'
          channel: 'stable'

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows app
        run: flutter build windows --release

      - name: Copy required DLLs and prepare package
        run: |
          $buildPath = "build/windows/x64/runner/Release"
          
          # Ensure build directory exists
          if (!(Test-Path $buildPath)) {
              Write-Error "Build path not found: $buildPath"
              exit 1
          }
          
          echo "=== Copying Flutter DLLs ==="
          # Try multiple locations for flutter_windows.dll
          $flutterDllPaths = @(
              "$env:FLUTTER_ROOT\bin\cache\artifacts\engine\windows-x64\flutter_windows.dll",
              "$env:FLUTTER_ROOT\bin\flutter_windows.dll",
              "$env:FLUTTER_ROOT\bin\cache\artifacts\engine\windows-x64-release\flutter_windows.dll"
          )
          
          $flutterDllFound = $false
          foreach ($dllPath in $flutterDllPaths) {
              if (Test-Path $dllPath) {
                  Copy-Item $dllPath $buildPath -Force
                  echo "‚úÖ Copied flutter_windows.dll from: $dllPath"
                  $flutterDllFound = $true
                  break
              }
          }
          
          if (!$flutterDllFound) {
              Write-Warning "‚ö†Ô∏è flutter_windows.dll not found in expected locations"
              # Force Flutter to download engine artifacts
              echo "Attempting to download Flutter engine artifacts..."
              flutter precache --windows
          
              # Try again after precache
              foreach ($dllPath in $flutterDllPaths) {
                  if (Test-Path $dllPath) {
                      Copy-Item $dllPath $buildPath -Force
                      echo "‚úÖ Copied flutter_windows.dll from: $dllPath (after precache)"
                      $flutterDllFound = $true
                      break
                  }
              }
          
              if (!$flutterDllFound) {
                  # Last resort: search for the DLL in the Flutter installation
                  echo "Searching for flutter_windows.dll in Flutter installation..."
                  $foundDlls = Get-ChildItem "$env:FLUTTER_ROOT" -Name "flutter_windows.dll" -Recurse -ErrorAction SilentlyContinue
                  foreach ($dll in $foundDlls) {
                      $fullPath = Join-Path $env:FLUTTER_ROOT $dll
                      Copy-Item $fullPath $buildPath -Force
                      echo "‚úÖ Copied flutter_windows.dll from: $fullPath"
                      $flutterDllFound = $true
                      break
                  }
              }
          }
          
          if (!$flutterDllFound) {
              Write-Error "‚ùå Could not find flutter_windows.dll - build will fail at runtime!"
              exit 1
          }
          
          echo "=== Copying Visual C++ Redistributables ==="
          # Find and copy Visual C++ Redistributable DLLs
          $vcRedistPaths = @(
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Redist\MSVC\*\x64\Microsoft.VC*.CRT\*.dll",
              "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\*\x64\Microsoft.VC*.CRT\*.dll",
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools\VC\Redist\MSVC\*\x64\Microsoft.VC*.CRT\*.dll",
              "C:\Windows\System32\msvcp140.dll",
              "C:\Windows\System32\vcruntime140.dll",
              "C:\Windows\System32\vcruntime140_1.dll"
          )
          
          foreach ($path in $vcRedistPaths) {
              $files = Get-ChildItem $path -ErrorAction SilentlyContinue
              foreach ($file in $files) {
                  if ($file.Name -match "(msvcp140|vcruntime140)") {
                      Copy-Item $file.FullName $buildPath -Force -ErrorAction SilentlyContinue
                      echo "‚úÖ Copied: $($file.Name)"
                  }
              }
          }
          
          echo "=== Final DLL verification ==="
          $requiredDlls = @("flutter_windows.dll", "msvcp140.dll", "vcruntime140.dll")
          foreach ($dll in $requiredDlls) {
              if (Test-Path "$buildPath\$dll") {
                  echo "‚úÖ $dll - OK"
              } else {
                  echo "‚ùå $dll - MISSING"
              }
          }
          
          echo "=== Contents of release folder ==="
          Get-ChildItem $buildPath | Format-Table Name, Length -AutoSize

      - name: Get app info and create package
        id: package
        run: |
          # Get app name from pubspec.yaml
          $content = Get-Content pubspec.yaml -Raw
          $appName = ($content | Select-String "name:\s*(.+)" | ForEach-Object { $_.Matches[0].Groups[1].Value }).Trim()
          
          # Get version from pubspec.yaml
          $version = ($content | Select-String "version:\s*(.+)" | ForEach-Object { $_.Matches[0].Groups[1].Value }).Trim()
          
          # Set environment variables
          echo "APP_NAME=$appName" >> $env:GITHUB_ENV
          echo "APP_VERSION=$version" >> $env:GITHUB_ENV
          
          # Create ZIP package with all dependencies
          $buildPath = "build/windows/x64/runner/Release"
          $zipName = "$appName-windows-x64-$version.zip"
          
          if (Test-Path $buildPath) {
              Compress-Archive -Path "$buildPath\*" -DestinationPath $zipName -Force
              echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV
              echo "‚úÖ Package created: $zipName"
          } else {
              Write-Error "Build path not found: $buildPath"
              exit 1
          }

      - name: Generate release tag
        id: tag
        run: |
          $timestamp = Get-Date -Format "yyyy.MM.dd.HHmm"
          $tag = "v${{ env.APP_VERSION }}-$timestamp"
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "Generated tag: $tag"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ env.APP_NAME }} v${{ env.APP_VERSION }}
          body: |
            ## üöÄ ${{ env.APP_NAME }} Windows Release
            
            **Version:** ${{ env.APP_VERSION }}
            **Build:** ${{ steps.tag.outputs.tag }}
            **Platform:** Windows x64
            
            ### üì¶ Installation
            1. Download the ZIP file from assets below
            2. Extract to your desired location
            3. Run the .exe file inside the extracted folder
            
            ### ‚ö†Ô∏è Requirements
            - Windows 10 or later
            - Visual C++ Redistributable (included in package)
            
            ### üîß Build Info
            - Built from commit: ${{ github.sha }}
            - Built on: ${{ github.run_number }}
            - Build date: ${{ github.event.head_commit.timestamp }}
            
            ### üìã Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
          files: |
            ${{ env.ZIP_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build output
        run: |
          echo "=== Build Verification ==="
          echo "App Name: ${{ env.APP_NAME }}"
          echo "Version: ${{ env.APP_VERSION }}"
          echo "ZIP file: ${{ env.ZIP_NAME }}"
          
          if (Test-Path "${{ env.ZIP_NAME }}") {
              echo "‚úÖ ZIP file exists"
              $zipSize = (Get-Item "${{ env.ZIP_NAME }}").Length
              echo "üì¶ ZIP size: $([math]::Round($zipSize/1MB, 2)) MB"
          } else {
              echo "‚ùå ZIP file not found"
          }
          
          $buildPath = "build/windows/x64/runner/Release"
          if (Test-Path $buildPath) {
              echo "‚úÖ Build directory exists"
              echo "üìÅ Build contents:"
              Get-ChildItem $buildPath | Format-Table Name, Length -AutoSize
          
              # Check for required DLLs
              $requiredDlls = @("flutter_windows.dll", "msvcp140.dll", "vcruntime140.dll")
              echo "üîç Final DLL check:"
              foreach ($dll in $requiredDlls) {
                  if (Test-Path "$buildPath\$dll") {
                      echo "‚úÖ $dll found"
                  } else {
                      echo "‚ùå $dll missing - THIS WILL CAUSE RUNTIME ERRORS!"
                  }
              }
          } else {
              echo "‚ùå Build directory not found"
          }